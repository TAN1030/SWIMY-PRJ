server.servlet.encoding.charset=UTF-8  
server.servlet.encoding.enabled=true  
server.servlet.encoding.force=true  


### MySQL ###
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://13.209.21.11:3306/swimyDB?serverTimezone=UTC&characterEncoding=UTF-8   
spring.datasource.username=swimy
spring.datasource.password=swimy4_Master

### Spring jpa ###
#spring.jpa.database-platform=org.hibernate.dialect.MySQL5Dialect 
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
# Hibernate 는 내부적으로 지정되는 DB에 맞게 SQL 문을 생성하는 Dialect 가 존재. 
# 이 Dialect 는 Hibernate가 다양한 데이터 베이스를 처리하기 위해 각 데이터 베이스에 맞는 SQL 문법을 처리하기 위해 존재.
# MySQL5Dialect, MySQL5InnoDBDialect, Oracle10gDialect, OracleDialect 등.. 
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.highlight_sql=true
# spring.jpa.properties.hibernate.use_sql_comments=true
# JPA 나 hibernate를 통해 CRUD 를 실행하면 해당 CRUD 의 sql 을 로깅으로
#spring.jpa.properties.hibernate.ddl-auto=create  
#spring.jpa.properties.ddl-auto=validate
#spring.jpa.hibernate.ddl-auto=create 
# ddl-auto 옵션의 종류 : create / create-drop / validate / update / none
# - create : 테이블이 없을 경우 테이블 생성하는 옵션(이 때 DB 가 전부 날아가기 때문에, create로 해놓으면 실행시마다 DB 가 날아간다. )
# - create-drop : 테스트 환경에 적합한 옵션. 테스트 실행 시 mock data를 위해 table을 생성하고 테스트 종료 후 테이블을 삭제시킨다. 
# - validate : application 실행 시  @Entity들과 이미 존재하는 테이블(schema)가 정상적으로 맵핑되었는지 판단하여 만약 @Entity 와 테이블이 제대로 맵핑되지 않으면 application이 실행되지 않는다. 
# - update : 이미 테이블이 존재하는 상황에서 @Entity에 속성이 추가될 경우, 기존의 테이블의 데이터에는 변화 없이 새로운 컬럼을 추가해준다. 
# - none : 아무 작업도 하지 않는다. 

 
