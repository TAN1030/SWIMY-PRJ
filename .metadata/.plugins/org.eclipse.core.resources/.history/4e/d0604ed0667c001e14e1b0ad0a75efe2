/**
 * P6Spy
 *
 * Copyright (C) 2002 - 2019 P6Spy
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.p6spy.engine.spy.appender;

import jakarta.annotation.PostConstruct;

/**
 * @author kkr
 * @since 11/2023
 */
public class MultiLineFormat implements MessageFormattingStrategy {

	 @PostConstruct
	    public void setLogMessageFormat() {
	        P6SpyOptions.getActiveInstance().setLogMessageFormat(this.getClass().getName());
	    }
	 
	    @Override
	    public String formatMessage(int connectionId, String now, long elapsed, String category, String prepared, String sql, String url) {
	        sql = formatSql(category, sql);
	        return String.format("[%s] | %d ms | %s", category, elapsed, formatSql(category, sql));
	    }
	 
	    private String formatSql(String category, String sql) {
	        if (sql != null && !sql.trim().isEmpty() && Category.STATEMENT.getName().equals(category)) {
	            String trimmedSQL = sql.trim().toLowerCase(Locale.ROOT);
	            if (trimmedSQL.startsWith("create") || trimmedSQL.startsWith("alter") || trimmedSQL.startsWith("comment")) {
	                sql = FormatStyle.DDL.getFormatter().format(sql);
	            } else {
	                sql = FormatStyle.BASIC.getFormatter().format(sql);
	            }
	            return sql;
	        }
	        return sql;
	    }
	 
}
