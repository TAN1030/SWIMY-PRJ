package com.cassan.swimy;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.Assert.assertTrue;

import java.util.Set;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import org.junit.runner.RunWith;

import junitparams.JUnitParamsRunner;
import lombok.extern.slf4j.Slf4j;

/*
 * < JUnitParamsRunner 매개변수를 이용하여 Junit 테스트 클래스 >
 * - https://zhfvkq.tistory.com/47
 */

@Slf4j /* lombok의 자동로그 생성을 사용. 인터페이스나 구현체를 생성할 필요가 없다 */
@RunWith(JUnitParamsRunner.class)
public class JunitTests {
	
	@ParameterizedTest
    @ValueSource(ints = {20})
    void isEven(int number)   {
		log.info("insertDummyData={}", number);
		assertTrue(number%2==0);
    }
	
	@ParameterizedTest
	@ValueSource(ints = {1, 3, 5, -3, 15, Integer.MAX_VALUE}) // six numbers
	void isOdd(int number) {
		log.info("isOdd_ShouldReturnTrueForOddNumbers={}", number); 
		assertTrue(number%2==1);
	}
	
	@ParameterizedTest
	@ValueSource(strings = {"A", "B", "C", "D"})
	void containsABC(String value) {
	    assertThat(Set.of("A", "B", "C")).contains(value);
	}
	
	@ParameterizedTest
	// @NullAndEmptySource 사용법찾아보기
	@ValueSource(strings = {"\n", "\t", "     "})
	void isBlank(String input) {
		/*   isEmpty() : 문자열의 길이가 0인 경우에, true를 리턴 
 			 isBlank() : 문자열이 비어 있거나, 빈 공백으로만 이루어져 있으면, true를 리턴 */
	    assertTrue(input.isBlank()); 
	} 
}
